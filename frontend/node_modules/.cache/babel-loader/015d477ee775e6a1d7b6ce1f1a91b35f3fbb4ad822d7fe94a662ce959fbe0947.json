{"ast":null,"code":"import _classPrivateMethodInitSpec from \"/Users/serdarselcuk/Desktop/DevOps/Project/muhasebedemo/node_modules/@babel/runtime/helpers/esm/classPrivateMethodInitSpec.js\";\nimport _classPrivateFieldInitSpec from \"/Users/serdarselcuk/Desktop/DevOps/Project/muhasebedemo/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _assertClassBrand from \"/Users/serdarselcuk/Desktop/DevOps/Project/muhasebedemo/node_modules/@babel/runtime/helpers/esm/assertClassBrand.js\";\nimport _classPrivateFieldGet from \"/Users/serdarselcuk/Desktop/DevOps/Project/muhasebedemo/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet2.js\";\nimport _classPrivateFieldSet from \"/Users/serdarselcuk/Desktop/DevOps/Project/muhasebedemo/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet2.js\";\nvar _client, _result, _queries, _options, _observers, _combinedResult, _lastCombine, _lastResult, _observerMatches, _Class_brand;\n// src/queriesObserver.ts\nimport { notifyManager } from \"./notifyManager.js\";\nimport { QueryObserver } from \"./queryObserver.js\";\nimport { Subscribable } from \"./subscribable.js\";\nimport { replaceEqualDeep } from \"./utils.js\";\nfunction difference(array1, array2) {\n  return array1.filter(x => !array2.includes(x));\n}\nfunction replaceAt(array, index, value) {\n  const copy = array.slice(0);\n  copy[index] = value;\n  return copy;\n}\nvar QueriesObserver = (_client = /*#__PURE__*/new WeakMap(), _result = /*#__PURE__*/new WeakMap(), _queries = /*#__PURE__*/new WeakMap(), _options = /*#__PURE__*/new WeakMap(), _observers = /*#__PURE__*/new WeakMap(), _combinedResult = /*#__PURE__*/new WeakMap(), _lastCombine = /*#__PURE__*/new WeakMap(), _lastResult = /*#__PURE__*/new WeakMap(), _observerMatches = /*#__PURE__*/new WeakMap(), _Class_brand = /*#__PURE__*/new WeakSet(), class QueriesObserver extends Subscribable {\n  constructor(client, _queries2, _options2) {\n    super();\n    _classPrivateMethodInitSpec(this, _Class_brand);\n    _classPrivateFieldInitSpec(this, _client, void 0);\n    _classPrivateFieldInitSpec(this, _result, void 0);\n    _classPrivateFieldInitSpec(this, _queries, void 0);\n    _classPrivateFieldInitSpec(this, _options, void 0);\n    _classPrivateFieldInitSpec(this, _observers, void 0);\n    _classPrivateFieldInitSpec(this, _combinedResult, void 0);\n    _classPrivateFieldInitSpec(this, _lastCombine, void 0);\n    _classPrivateFieldInitSpec(this, _lastResult, void 0);\n    _classPrivateFieldInitSpec(this, _observerMatches, []);\n    _classPrivateFieldSet(_client, this, client);\n    _classPrivateFieldSet(_options, this, _options2);\n    _classPrivateFieldSet(_queries, this, []);\n    _classPrivateFieldSet(_observers, this, []);\n    _classPrivateFieldSet(_result, this, []);\n    this.setQueries(_queries2);\n  }\n  onSubscribe() {\n    if (this.listeners.size === 1) {\n      _classPrivateFieldGet(_observers, this).forEach(observer => {\n        observer.subscribe(result => {\n          _assertClassBrand(_Class_brand, this, _onUpdate).call(this, observer, result);\n        });\n      });\n    }\n  }\n  onUnsubscribe() {\n    if (!this.listeners.size) {\n      this.destroy();\n    }\n  }\n  destroy() {\n    this.listeners = /* @__PURE__ */new Set();\n    _classPrivateFieldGet(_observers, this).forEach(observer => {\n      observer.destroy();\n    });\n  }\n  setQueries(queries, options) {\n    _classPrivateFieldSet(_queries, this, queries);\n    _classPrivateFieldSet(_options, this, options);\n    if (process.env.NODE_ENV !== \"production\") {\n      const queryHashes = queries.map(query => _classPrivateFieldGet(_client, this).defaultQueryOptions(query).queryHash);\n      if (new Set(queryHashes).size !== queryHashes.length) {\n        console.warn(\"[QueriesObserver]: Duplicate Queries found. This might result in unexpected behavior.\");\n      }\n    }\n    notifyManager.batch(() => {\n      const prevObservers = _classPrivateFieldGet(_observers, this);\n      const newObserverMatches = _assertClassBrand(_Class_brand, this, _findMatchingObservers).call(this, _classPrivateFieldGet(_queries, this));\n      _classPrivateFieldSet(_observerMatches, this, newObserverMatches);\n      newObserverMatches.forEach(match => match.observer.setOptions(match.defaultedQueryOptions));\n      const newObservers = newObserverMatches.map(match => match.observer);\n      const newResult = newObservers.map(observer => observer.getCurrentResult());\n      const hasIndexChange = newObservers.some((observer, index) => observer !== prevObservers[index]);\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return;\n      }\n      _classPrivateFieldSet(_observers, this, newObservers);\n      _classPrivateFieldSet(_result, this, newResult);\n      if (!this.hasListeners()) {\n        return;\n      }\n      difference(prevObservers, newObservers).forEach(observer => {\n        observer.destroy();\n      });\n      difference(newObservers, prevObservers).forEach(observer => {\n        observer.subscribe(result => {\n          _assertClassBrand(_Class_brand, this, _onUpdate).call(this, observer, result);\n        });\n      });\n      _assertClassBrand(_Class_brand, this, _notify).call(this);\n    });\n  }\n  getCurrentResult() {\n    return _classPrivateFieldGet(_result, this);\n  }\n  getQueries() {\n    return _classPrivateFieldGet(_observers, this).map(observer => observer.getCurrentQuery());\n  }\n  getObservers() {\n    return _classPrivateFieldGet(_observers, this);\n  }\n  getOptimisticResult(queries, combine) {\n    const matches = _assertClassBrand(_Class_brand, this, _findMatchingObservers).call(this, queries);\n    const result = matches.map(match => match.observer.getOptimisticResult(match.defaultedQueryOptions));\n    return [result, r => {\n      return _assertClassBrand(_Class_brand, this, _combineResult).call(this, r !== null && r !== void 0 ? r : result, combine);\n    }, () => {\n      return _assertClassBrand(_Class_brand, this, _trackResult).call(this, result, matches);\n    }];\n  }\n});\nfunction _trackResult(result, matches) {\n  return matches.map((match, index) => {\n    const observerResult = result[index];\n    return !match.defaultedQueryOptions.notifyOnChangeProps ? match.observer.trackResult(observerResult, accessedProp => {\n      matches.forEach(m => {\n        m.observer.trackProp(accessedProp);\n      });\n    }) : observerResult;\n  });\n}\nfunction _combineResult(input, combine) {\n  if (combine) {\n    if (!_classPrivateFieldGet(_combinedResult, this) || _classPrivateFieldGet(_result, this) !== _classPrivateFieldGet(_lastResult, this) || combine !== _classPrivateFieldGet(_lastCombine, this)) {\n      _classPrivateFieldSet(_lastCombine, this, combine);\n      _classPrivateFieldSet(_lastResult, this, _classPrivateFieldGet(_result, this));\n      _classPrivateFieldSet(_combinedResult, this, replaceEqualDeep(_classPrivateFieldGet(_combinedResult, this), combine(input)));\n    }\n    return _classPrivateFieldGet(_combinedResult, this);\n  }\n  return input;\n}\nfunction _findMatchingObservers(queries) {\n  const prevObserversMap = new Map(_classPrivateFieldGet(_observers, this).map(observer => [observer.options.queryHash, observer]));\n  const observers = [];\n  queries.forEach(options => {\n    const defaultedOptions = _classPrivateFieldGet(_client, this).defaultQueryOptions(options);\n    const match = prevObserversMap.get(defaultedOptions.queryHash);\n    if (match) {\n      observers.push({\n        defaultedQueryOptions: defaultedOptions,\n        observer: match\n      });\n    } else {\n      observers.push({\n        defaultedQueryOptions: defaultedOptions,\n        observer: new QueryObserver(_classPrivateFieldGet(_client, this), defaultedOptions)\n      });\n    }\n  });\n  return observers;\n}\nfunction _onUpdate(observer, result) {\n  const index = _classPrivateFieldGet(_observers, this).indexOf(observer);\n  if (index !== -1) {\n    _classPrivateFieldSet(_result, this, replaceAt(_classPrivateFieldGet(_result, this), index, result));\n    _assertClassBrand(_Class_brand, this, _notify).call(this);\n  }\n}\nfunction _notify() {\n  if (this.hasListeners()) {\n    var _classPrivateFieldGet2;\n    const previousResult = _classPrivateFieldGet(_combinedResult, this);\n    const newTracked = _assertClassBrand(_Class_brand, this, _trackResult).call(this, _classPrivateFieldGet(_result, this), _classPrivateFieldGet(_observerMatches, this));\n    const newResult = _assertClassBrand(_Class_brand, this, _combineResult).call(this, newTracked, (_classPrivateFieldGet2 = _classPrivateFieldGet(_options, this)) === null || _classPrivateFieldGet2 === void 0 ? void 0 : _classPrivateFieldGet2.combine);\n    if (previousResult !== newResult) {\n      notifyManager.batch(() => {\n        this.listeners.forEach(listener => {\n          listener(_classPrivateFieldGet(_result, this));\n        });\n      });\n    }\n  }\n}\nexport { QueriesObserver };","map":{"version":3,"names":["notifyManager","QueryObserver","Subscribable","replaceEqualDeep","difference","array1","array2","filter","x","includes","replaceAt","array","index","value","copy","slice","QueriesObserver","_client","WeakMap","_result","_queries","_options","_observers","_combinedResult","_lastCombine","_lastResult","_observerMatches","_Class_brand","WeakSet","constructor","client","queries","options","_classPrivateMethodInitSpec","_classPrivateFieldInitSpec","_classPrivateFieldSet","setQueries","onSubscribe","listeners","size","_classPrivateFieldGet","forEach","observer","subscribe","result","_assertClassBrand","_onUpdate","call","onUnsubscribe","destroy","Set","process","env","NODE_ENV","queryHashes","map","query","defaultQueryOptions","queryHash","length","console","warn","batch","prevObservers","newObserverMatches","_findMatchingObservers","match","setOptions","defaultedQueryOptions","newObservers","newResult","getCurrentResult","hasIndexChange","some","hasListeners","_notify","getQueries","getCurrentQuery","getObservers","getOptimisticResult","combine","matches","r","_combineResult","_trackResult","observerResult","notifyOnChangeProps","trackResult","accessedProp","m","trackProp","input","prevObserversMap","Map","observers","defaultedOptions","get","push","indexOf","_classPrivateFieldGet2","previousResult","newTracked","listener"],"sources":["/Users/serdarselcuk/Desktop/DevOps/Project/muhasebedemo/node_modules/@tanstack/query-core/src/queriesObserver.ts"],"sourcesContent":["import { notifyManager } from './notifyManager'\nimport { QueryObserver } from './queryObserver'\nimport { Subscribable } from './subscribable'\nimport { replaceEqualDeep } from './utils'\nimport type {\n  DefaultedQueryObserverOptions,\n  QueryObserverOptions,\n  QueryObserverResult,\n} from './types'\nimport type { QueryClient } from './queryClient'\n\nfunction difference<T>(array1: Array<T>, array2: Array<T>): Array<T> {\n  return array1.filter((x) => !array2.includes(x))\n}\n\nfunction replaceAt<T>(array: Array<T>, index: number, value: T): Array<T> {\n  const copy = array.slice(0)\n  copy[index] = value\n  return copy\n}\n\ntype QueriesObserverListener = (result: Array<QueryObserverResult>) => void\n\ntype CombineFn<TCombinedResult> = (\n  result: Array<QueryObserverResult>,\n) => TCombinedResult\n\nexport interface QueriesObserverOptions<\n  TCombinedResult = Array<QueryObserverResult>,\n> {\n  combine?: CombineFn<TCombinedResult>\n}\n\nexport class QueriesObserver<\n  TCombinedResult = Array<QueryObserverResult>,\n> extends Subscribable<QueriesObserverListener> {\n  #client: QueryClient\n  #result!: Array<QueryObserverResult>\n  #queries: Array<QueryObserverOptions>\n  #options?: QueriesObserverOptions<TCombinedResult>\n  #observers: Array<QueryObserver>\n  #combinedResult?: TCombinedResult\n  #lastCombine?: CombineFn<TCombinedResult>\n  #lastResult?: Array<QueryObserverResult>\n  #observerMatches: Array<QueryObserverMatch> = []\n\n  constructor(\n    client: QueryClient,\n    queries: Array<QueryObserverOptions<any, any, any, any, any>>,\n    options?: QueriesObserverOptions<TCombinedResult>,\n  ) {\n    super()\n\n    this.#client = client\n    this.#options = options\n    this.#queries = []\n    this.#observers = []\n    this.#result = []\n\n    this.setQueries(queries)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.size === 1) {\n      this.#observers.forEach((observer) => {\n        observer.subscribe((result) => {\n          this.#onUpdate(observer, result)\n        })\n      })\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.size) {\n      this.destroy()\n    }\n  }\n\n  destroy(): void {\n    this.listeners = new Set()\n    this.#observers.forEach((observer) => {\n      observer.destroy()\n    })\n  }\n\n  setQueries(\n    queries: Array<QueryObserverOptions>,\n    options?: QueriesObserverOptions<TCombinedResult>,\n  ): void {\n    this.#queries = queries\n    this.#options = options\n\n    if (process.env.NODE_ENV !== 'production') {\n      const queryHashes = queries.map(\n        (query) => this.#client.defaultQueryOptions(query).queryHash,\n      )\n      if (new Set(queryHashes).size !== queryHashes.length) {\n        console.warn(\n          '[QueriesObserver]: Duplicate Queries found. This might result in unexpected behavior.',\n        )\n      }\n    }\n\n    notifyManager.batch(() => {\n      const prevObservers = this.#observers\n\n      const newObserverMatches = this.#findMatchingObservers(this.#queries)\n      this.#observerMatches = newObserverMatches\n\n      // set options for the new observers to notify of changes\n      newObserverMatches.forEach((match) =>\n        match.observer.setOptions(match.defaultedQueryOptions),\n      )\n\n      const newObservers = newObserverMatches.map((match) => match.observer)\n      const newResult = newObservers.map((observer) =>\n        observer.getCurrentResult(),\n      )\n\n      const hasIndexChange = newObservers.some(\n        (observer, index) => observer !== prevObservers[index],\n      )\n\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return\n      }\n\n      this.#observers = newObservers\n      this.#result = newResult\n\n      if (!this.hasListeners()) {\n        return\n      }\n\n      difference(prevObservers, newObservers).forEach((observer) => {\n        observer.destroy()\n      })\n\n      difference(newObservers, prevObservers).forEach((observer) => {\n        observer.subscribe((result) => {\n          this.#onUpdate(observer, result)\n        })\n      })\n\n      this.#notify()\n    })\n  }\n\n  getCurrentResult(): Array<QueryObserverResult> {\n    return this.#result\n  }\n\n  getQueries() {\n    return this.#observers.map((observer) => observer.getCurrentQuery())\n  }\n\n  getObservers() {\n    return this.#observers\n  }\n\n  getOptimisticResult(\n    queries: Array<QueryObserverOptions>,\n    combine: CombineFn<TCombinedResult> | undefined,\n  ): [\n    rawResult: Array<QueryObserverResult>,\n    combineResult: (r?: Array<QueryObserverResult>) => TCombinedResult,\n    trackResult: () => Array<QueryObserverResult>,\n  ] {\n    const matches = this.#findMatchingObservers(queries)\n    const result = matches.map((match) =>\n      match.observer.getOptimisticResult(match.defaultedQueryOptions),\n    )\n\n    return [\n      result,\n      (r?: Array<QueryObserverResult>) => {\n        return this.#combineResult(r ?? result, combine)\n      },\n      () => {\n        return this.#trackResult(result, matches)\n      },\n    ]\n  }\n\n  #trackResult(\n    result: Array<QueryObserverResult>,\n    matches: Array<QueryObserverMatch>,\n  ) {\n    return matches.map((match, index) => {\n      const observerResult = result[index]!\n      return !match.defaultedQueryOptions.notifyOnChangeProps\n        ? match.observer.trackResult(observerResult, (accessedProp) => {\n            // track property on all observers to ensure proper (synchronized) tracking (#7000)\n            matches.forEach((m) => {\n              m.observer.trackProp(accessedProp)\n            })\n          })\n        : observerResult\n    })\n  }\n\n  #combineResult(\n    input: Array<QueryObserverResult>,\n    combine: CombineFn<TCombinedResult> | undefined,\n  ): TCombinedResult {\n    if (combine) {\n      if (\n        !this.#combinedResult ||\n        this.#result !== this.#lastResult ||\n        combine !== this.#lastCombine\n      ) {\n        this.#lastCombine = combine\n        this.#lastResult = this.#result\n        this.#combinedResult = replaceEqualDeep(\n          this.#combinedResult,\n          combine(input),\n        )\n      }\n\n      return this.#combinedResult\n    }\n    return input as any\n  }\n\n  #findMatchingObservers(\n    queries: Array<QueryObserverOptions>,\n  ): Array<QueryObserverMatch> {\n    const prevObserversMap = new Map(\n      this.#observers.map((observer) => [observer.options.queryHash, observer]),\n    )\n\n    const observers: Array<QueryObserverMatch> = []\n\n    queries.forEach((options) => {\n      const defaultedOptions = this.#client.defaultQueryOptions(options)\n      const match = prevObserversMap.get(defaultedOptions.queryHash)\n      if (match) {\n        observers.push({\n          defaultedQueryOptions: defaultedOptions,\n          observer: match,\n        })\n      } else {\n        observers.push({\n          defaultedQueryOptions: defaultedOptions,\n          observer: new QueryObserver(this.#client, defaultedOptions),\n        })\n      }\n    })\n\n    return observers\n  }\n\n  #onUpdate(observer: QueryObserver, result: QueryObserverResult): void {\n    const index = this.#observers.indexOf(observer)\n    if (index !== -1) {\n      this.#result = replaceAt(this.#result, index, result)\n      this.#notify()\n    }\n  }\n\n  #notify(): void {\n    if (this.hasListeners()) {\n      const previousResult = this.#combinedResult\n      const newTracked = this.#trackResult(this.#result, this.#observerMatches)\n      const newResult = this.#combineResult(newTracked, this.#options?.combine)\n\n      if (previousResult !== newResult) {\n        notifyManager.batch(() => {\n          this.listeners.forEach((listener) => {\n            listener(this.#result)\n          })\n        })\n      }\n    }\n  }\n}\n\ntype QueryObserverMatch = {\n  defaultedQueryOptions: DefaultedQueryObserverOptions\n  observer: QueryObserver\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}