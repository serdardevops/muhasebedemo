{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{useQueryClient}from'@tanstack/react-query';import{authService}from'../services/authService';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(undefined);export const useAuth=()=>{const context=useContext(AuthContext);if(context===undefined){throw new Error('useAuth must be used within an AuthProvider');}return context;};export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[isLoading,setIsLoading]=useState(true);const queryClient=useQueryClient();useEffect(()=>{const initAuth=async()=>{try{const token=localStorage.getItem('token');if(token){const userData=await authService.getCurrentUser();setUser(userData);}}catch(error){localStorage.removeItem('token');}finally{setIsLoading(false);}};initAuth();},[]);const login=async(email,password)=>{setIsLoading(true);try{// Clear cache before login to ensure fresh data\nqueryClient.clear();const response=await authService.login(email,password);localStorage.setItem('token',response.token);setUser(response.user);}finally{setIsLoading(false);}};const register=async userData=>{setIsLoading(true);try{// Clear cache before register to ensure fresh data\nqueryClient.clear();const response=await authService.register(userData);localStorage.setItem('token',response.token);setUser(response.user);}finally{setIsLoading(false);}};const logout=()=>{localStorage.removeItem('token');setUser(null);// Clear all cached data when user logs out\nqueryClient.clear();};const value={user,isAuthenticated:!!user,isLoading,login,register,logout};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useQueryClient","authService","jsx","_jsx","AuthContext","undefined","useAuth","context","Error","AuthProvider","_ref","children","user","setUser","isLoading","setIsLoading","queryClient","initAuth","token","localStorage","getItem","userData","getCurrentUser","error","removeItem","login","email","password","clear","response","setItem","register","logout","value","isAuthenticated","Provider"],"sources":["/Users/serdarselcuk/Desktop/DevOps/Project/muhasebedemo/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { authService } from '../services/authService';\n\ninterface User {\n  id: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  role: string;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  register: (userData: RegisterData) => Promise<void>;\n  logout: () => void;\n}\n\ninterface RegisterData {\n  email: string;\n  password: string;\n  firstName: string;\n  lastName: string;\n  companyName?: string;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const queryClient = useQueryClient();\n\n  useEffect(() => {\n    const initAuth = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        if (token) {\n          const userData = await authService.getCurrentUser();\n          setUser(userData);\n        }\n      } catch (error) {\n        localStorage.removeItem('token');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    initAuth();\n  }, []);\n\n  const login = async (email: string, password: string) => {\n    setIsLoading(true);\n    try {\n      // Clear cache before login to ensure fresh data\n      queryClient.clear();\n      const response = await authService.login(email, password);\n      localStorage.setItem('token', response.token);\n      setUser(response.user);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const register = async (userData: RegisterData) => {\n    setIsLoading(true);\n    try {\n      // Clear cache before register to ensure fresh data\n      queryClient.clear();\n      const response = await authService.register(userData);\n      localStorage.setItem('token', response.token);\n      setUser(response.user);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('token');\n    setUser(null);\n    // Clear all cached data when user logs out\n    queryClient.clear();\n  };\n\n  const value: AuthContextType = {\n    user,\n    isAuthenticated: !!user,\n    isLoading,\n    login,\n    register,\n    logout,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}