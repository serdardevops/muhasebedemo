{"ast":null,"code":"// src/retryer.ts\nimport { focusManager } from \"./focusManager.js\";\nimport { onlineManager } from \"./onlineManager.js\";\nimport { pendingThenable } from \"./thenable.js\";\nimport { isServer, sleep } from \"./utils.js\";\nfunction defaultRetryDelay(failureCount) {\n  return Math.min(1e3 * 2 ** failureCount, 3e4);\n}\nfunction canFetch(networkMode) {\n  return (networkMode !== null && networkMode !== void 0 ? networkMode : \"online\") === \"online\" ? onlineManager.isOnline() : true;\n}\nvar CancelledError = class extends Error {\n  constructor(options) {\n    super(\"CancelledError\");\n    this.revert = options === null || options === void 0 ? void 0 : options.revert;\n    this.silent = options === null || options === void 0 ? void 0 : options.silent;\n  }\n};\nfunction isCancelledError(value) {\n  return value instanceof CancelledError;\n}\nfunction createRetryer(config) {\n  let isRetryCancelled = false;\n  let failureCount = 0;\n  let isResolved = false;\n  let continueFn;\n  const thenable = pendingThenable();\n  const cancel = cancelOptions => {\n    if (!isResolved) {\n      var _config$abort;\n      reject(new CancelledError(cancelOptions));\n      (_config$abort = config.abort) === null || _config$abort === void 0 || _config$abort.call(config);\n    }\n  };\n  const cancelRetry = () => {\n    isRetryCancelled = true;\n  };\n  const continueRetry = () => {\n    isRetryCancelled = false;\n  };\n  const canContinue = () => focusManager.isFocused() && (config.networkMode === \"always\" || onlineManager.isOnline()) && config.canRun();\n  const canStart = () => canFetch(config.networkMode) && config.canRun();\n  const resolve = value => {\n    if (!isResolved) {\n      var _config$onSuccess, _continueFn;\n      isResolved = true;\n      (_config$onSuccess = config.onSuccess) === null || _config$onSuccess === void 0 || _config$onSuccess.call(config, value);\n      (_continueFn = continueFn) === null || _continueFn === void 0 || _continueFn();\n      thenable.resolve(value);\n    }\n  };\n  const reject = value => {\n    if (!isResolved) {\n      var _config$onError, _continueFn2;\n      isResolved = true;\n      (_config$onError = config.onError) === null || _config$onError === void 0 || _config$onError.call(config, value);\n      (_continueFn2 = continueFn) === null || _continueFn2 === void 0 || _continueFn2();\n      thenable.reject(value);\n    }\n  };\n  const pause = () => {\n    return new Promise(continueResolve => {\n      var _config$onPause;\n      continueFn = value => {\n        if (isResolved || canContinue()) {\n          continueResolve(value);\n        }\n      };\n      (_config$onPause = config.onPause) === null || _config$onPause === void 0 || _config$onPause.call(config);\n    }).then(() => {\n      continueFn = void 0;\n      if (!isResolved) {\n        var _config$onContinue;\n        (_config$onContinue = config.onContinue) === null || _config$onContinue === void 0 || _config$onContinue.call(config);\n      }\n    });\n  };\n  const run = () => {\n    if (isResolved) {\n      return;\n    }\n    let promiseOrValue;\n    const initialPromise = failureCount === 0 ? config.initialPromise : void 0;\n    try {\n      promiseOrValue = initialPromise !== null && initialPromise !== void 0 ? initialPromise : config.fn();\n    } catch (error) {\n      promiseOrValue = Promise.reject(error);\n    }\n    Promise.resolve(promiseOrValue).then(resolve).catch(error => {\n      var _config$retry, _config$retryDelay, _config$onFail;\n      if (isResolved) {\n        return;\n      }\n      const retry = (_config$retry = config.retry) !== null && _config$retry !== void 0 ? _config$retry : isServer ? 0 : 3;\n      const retryDelay = (_config$retryDelay = config.retryDelay) !== null && _config$retryDelay !== void 0 ? _config$retryDelay : defaultRetryDelay;\n      const delay = typeof retryDelay === \"function\" ? retryDelay(failureCount, error) : retryDelay;\n      const shouldRetry = retry === true || typeof retry === \"number\" && failureCount < retry || typeof retry === \"function\" && retry(failureCount, error);\n      if (isRetryCancelled || !shouldRetry) {\n        reject(error);\n        return;\n      }\n      failureCount++;\n      (_config$onFail = config.onFail) === null || _config$onFail === void 0 || _config$onFail.call(config, failureCount, error);\n      sleep(delay).then(() => {\n        return canContinue() ? void 0 : pause();\n      }).then(() => {\n        if (isRetryCancelled) {\n          reject(error);\n        } else {\n          run();\n        }\n      });\n    });\n  };\n  return {\n    promise: thenable,\n    cancel,\n    continue: () => {\n      var _continueFn3;\n      (_continueFn3 = continueFn) === null || _continueFn3 === void 0 || _continueFn3();\n      return thenable;\n    },\n    cancelRetry,\n    continueRetry,\n    canStart,\n    start: () => {\n      if (canStart()) {\n        run();\n      } else {\n        pause().then(run);\n      }\n      return thenable;\n    }\n  };\n}\nexport { CancelledError, canFetch, createRetryer, isCancelledError };","map":{"version":3,"names":["focusManager","onlineManager","pendingThenable","isServer","sleep","defaultRetryDelay","failureCount","Math","min","canFetch","networkMode","isOnline","CancelledError","Error","constructor","options","revert","silent","isCancelledError","value","createRetryer","config","isRetryCancelled","isResolved","continueFn","thenable","cancel","cancelOptions","_config$abort","reject","abort","call","cancelRetry","continueRetry","canContinue","isFocused","canRun","canStart","resolve","_config$onSuccess","_continueFn","onSuccess","_config$onError","_continueFn2","onError","pause","Promise","continueResolve","_config$onPause","onPause","then","_config$onContinue","onContinue","run","promiseOrValue","initialPromise","fn","error","catch","_config$retry","_config$retryDelay","_config$onFail","retry","retryDelay","delay","shouldRetry","onFail","promise","continue","_continueFn3","start"],"sources":["/Users/serdarselcuk/Desktop/DevOps/Project/muhasebedemo/node_modules/@tanstack/query-core/src/retryer.ts"],"sourcesContent":["import { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { pendingThenable } from './thenable'\nimport { isServer, sleep } from './utils'\nimport type { CancelOptions, DefaultError, NetworkMode } from './types'\n\n// TYPES\n\ninterface RetryerConfig<TData = unknown, TError = DefaultError> {\n  fn: () => TData | Promise<TData>\n  initialPromise?: Promise<TData>\n  abort?: () => void\n  onError?: (error: TError) => void\n  onSuccess?: (data: TData) => void\n  onFail?: (failureCount: number, error: TError) => void\n  onPause?: () => void\n  onContinue?: () => void\n  retry?: RetryValue<TError>\n  retryDelay?: RetryDelayValue<TError>\n  networkMode: NetworkMode | undefined\n  canRun: () => boolean\n}\n\nexport interface Retryer<TData = unknown> {\n  promise: Promise<TData>\n  cancel: (cancelOptions?: CancelOptions) => void\n  continue: () => Promise<unknown>\n  cancelRetry: () => void\n  continueRetry: () => void\n  canStart: () => boolean\n  start: () => Promise<TData>\n}\n\nexport type RetryValue<TError> = boolean | number | ShouldRetryFunction<TError>\n\ntype ShouldRetryFunction<TError = DefaultError> = (\n  failureCount: number,\n  error: TError,\n) => boolean\n\nexport type RetryDelayValue<TError> = number | RetryDelayFunction<TError>\n\ntype RetryDelayFunction<TError = DefaultError> = (\n  failureCount: number,\n  error: TError,\n) => number\n\nfunction defaultRetryDelay(failureCount: number) {\n  return Math.min(1000 * 2 ** failureCount, 30000)\n}\n\nexport function canFetch(networkMode: NetworkMode | undefined): boolean {\n  return (networkMode ?? 'online') === 'online'\n    ? onlineManager.isOnline()\n    : true\n}\n\nexport class CancelledError extends Error {\n  revert?: boolean\n  silent?: boolean\n  constructor(options?: CancelOptions) {\n    super('CancelledError')\n    this.revert = options?.revert\n    this.silent = options?.silent\n  }\n}\n\nexport function isCancelledError(value: any): value is CancelledError {\n  return value instanceof CancelledError\n}\n\nexport function createRetryer<TData = unknown, TError = DefaultError>(\n  config: RetryerConfig<TData, TError>,\n): Retryer<TData> {\n  let isRetryCancelled = false\n  let failureCount = 0\n  let isResolved = false\n  let continueFn: ((value?: unknown) => void) | undefined\n\n  const thenable = pendingThenable<TData>()\n\n  const cancel = (cancelOptions?: CancelOptions): void => {\n    if (!isResolved) {\n      reject(new CancelledError(cancelOptions))\n\n      config.abort?.()\n    }\n  }\n  const cancelRetry = () => {\n    isRetryCancelled = true\n  }\n\n  const continueRetry = () => {\n    isRetryCancelled = false\n  }\n\n  const canContinue = () =>\n    focusManager.isFocused() &&\n    (config.networkMode === 'always' || onlineManager.isOnline()) &&\n    config.canRun()\n\n  const canStart = () => canFetch(config.networkMode) && config.canRun()\n\n  const resolve = (value: any) => {\n    if (!isResolved) {\n      isResolved = true\n      config.onSuccess?.(value)\n      continueFn?.()\n      thenable.resolve(value)\n    }\n  }\n\n  const reject = (value: any) => {\n    if (!isResolved) {\n      isResolved = true\n      config.onError?.(value)\n      continueFn?.()\n      thenable.reject(value)\n    }\n  }\n\n  const pause = () => {\n    return new Promise((continueResolve) => {\n      continueFn = (value) => {\n        if (isResolved || canContinue()) {\n          continueResolve(value)\n        }\n      }\n      config.onPause?.()\n    }).then(() => {\n      continueFn = undefined\n      if (!isResolved) {\n        config.onContinue?.()\n      }\n    })\n  }\n\n  // Create loop function\n  const run = () => {\n    // Do nothing if already resolved\n    if (isResolved) {\n      return\n    }\n\n    let promiseOrValue: any\n\n    // we can re-use config.initialPromise on the first call of run()\n    const initialPromise =\n      failureCount === 0 ? config.initialPromise : undefined\n\n    // Execute query\n    try {\n      promiseOrValue = initialPromise ?? config.fn()\n    } catch (error) {\n      promiseOrValue = Promise.reject(error)\n    }\n\n    Promise.resolve(promiseOrValue)\n      .then(resolve)\n      .catch((error) => {\n        // Stop if the fetch is already resolved\n        if (isResolved) {\n          return\n        }\n\n        // Do we need to retry the request?\n        const retry = config.retry ?? (isServer ? 0 : 3)\n        const retryDelay = config.retryDelay ?? defaultRetryDelay\n        const delay =\n          typeof retryDelay === 'function'\n            ? retryDelay(failureCount, error)\n            : retryDelay\n        const shouldRetry =\n          retry === true ||\n          (typeof retry === 'number' && failureCount < retry) ||\n          (typeof retry === 'function' && retry(failureCount, error))\n\n        if (isRetryCancelled || !shouldRetry) {\n          // We are done if the query does not need to be retried\n          reject(error)\n          return\n        }\n\n        failureCount++\n\n        // Notify on fail\n        config.onFail?.(failureCount, error)\n\n        // Delay\n        sleep(delay)\n          // Pause if the document is not visible or when the device is offline\n          .then(() => {\n            return canContinue() ? undefined : pause()\n          })\n          .then(() => {\n            if (isRetryCancelled) {\n              reject(error)\n            } else {\n              run()\n            }\n          })\n      })\n  }\n\n  return {\n    promise: thenable,\n    cancel,\n    continue: () => {\n      continueFn?.()\n      return thenable\n    },\n    cancelRetry,\n    continueRetry,\n    canStart,\n    start: () => {\n      // Start loop\n      if (canStart()) {\n        run()\n      } else {\n        pause().then(run)\n      }\n      return thenable\n    },\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}