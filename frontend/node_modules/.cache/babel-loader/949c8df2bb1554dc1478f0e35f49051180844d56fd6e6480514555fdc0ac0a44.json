{"ast":null,"code":"var _jsxFileName = \"/Users/serdarselcuk/Desktop/DevOps/Project/muhasebedemo/frontend/src/contexts/AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { authService } from '../services/authService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const queryClient = useQueryClient();\n  useEffect(() => {\n    const initAuth = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        if (token) {\n          const userData = await authService.getCurrentUser();\n          setUser(userData);\n        }\n      } catch (error) {\n        localStorage.removeItem('token');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    initAuth();\n  }, []);\n  const login = async (email, password) => {\n    setIsLoading(true);\n    try {\n      // Clear cache before login to ensure fresh data\n      queryClient.clear();\n      const response = await authService.login(email, password);\n      localStorage.setItem('token', response.token);\n      setUser(response.user);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const register = async userData => {\n    setIsLoading(true);\n    try {\n      // Clear cache before register to ensure fresh data\n      queryClient.clear();\n      const response = await authService.register(userData);\n      localStorage.setItem('token', response.token);\n      setUser(response.user);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    setUser(null);\n    // Clear all cached data when user logs out\n    queryClient.clear();\n  };\n  const value = {\n    user,\n    isAuthenticated: !!user,\n    isLoading,\n    login,\n    register,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"1alNieDAA+tNDfjUzUgUn/7CHuo=\", false, function () {\n  return [useQueryClient];\n});\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useQueryClient","authService","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","isLoading","setIsLoading","queryClient","initAuth","token","localStorage","getItem","userData","getCurrentUser","error","removeItem","login","email","password","clear","response","setItem","register","logout","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/serdarselcuk/Desktop/DevOps/Project/muhasebedemo/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { authService } from '../services/authService';\n\ninterface User {\n  id: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  role: string;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  register: (userData: RegisterData) => Promise<void>;\n  logout: () => void;\n}\n\ninterface RegisterData {\n  email: string;\n  password: string;\n  firstName: string;\n  lastName: string;\n  companyName?: string;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const queryClient = useQueryClient();\n\n  useEffect(() => {\n    const initAuth = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        if (token) {\n          const userData = await authService.getCurrentUser();\n          setUser(userData);\n        }\n      } catch (error) {\n        localStorage.removeItem('token');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    initAuth();\n  }, []);\n\n  const login = async (email: string, password: string) => {\n    setIsLoading(true);\n    try {\n      // Clear cache before login to ensure fresh data\n      queryClient.clear();\n      const response = await authService.login(email, password);\n      localStorage.setItem('token', response.token);\n      setUser(response.user);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const register = async (userData: RegisterData) => {\n    setIsLoading(true);\n    try {\n      // Clear cache before register to ensure fresh data\n      queryClient.clear();\n      const response = await authService.register(userData);\n      localStorage.setItem('token', response.token);\n      setUser(response.user);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('token');\n    setUser(null);\n    // Clear all cached data when user logs out\n    queryClient.clear();\n  };\n\n  const value: AuthContextType = {\n    user,\n    isAuthenticated: !!user,\n    isLoading,\n    login,\n    register,\n    logout,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}