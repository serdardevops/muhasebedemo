{"ast":null,"code":"// src/streamedQuery.ts\nfunction streamedQuery({\n  queryFn,\n  refetchMode = \"reset\"\n}) {\n  return async context => {\n    const query = context.client.getQueryCache().find({\n      queryKey: context.queryKey,\n      exact: true\n    });\n    const isRefetch = !!query && query.state.data !== void 0;\n    if (isRefetch && refetchMode === \"reset\") {\n      query.setState({\n        status: \"pending\",\n        data: void 0,\n        error: null,\n        fetchStatus: \"fetching\"\n      });\n    }\n    const result = [];\n    const stream = await queryFn(context);\n    for await (const chunk of stream) {\n      if (context.signal.aborted) {\n        break;\n      }\n      if (!isRefetch || refetchMode !== \"replace\") {\n        context.client.setQueryData(context.queryKey, (prev = []) => {\n          return prev.concat([chunk]);\n        });\n      }\n      result.push(chunk);\n    }\n    if (isRefetch && refetchMode === \"replace\" && !context.signal.aborted) {\n      context.client.setQueryData(context.queryKey, result);\n    }\n    return context.client.getQueryData(context.queryKey);\n  };\n}\nexport { streamedQuery };","map":{"version":3,"names":["streamedQuery","queryFn","refetchMode","context","query","client","getQueryCache","find","queryKey","exact","isRefetch","state","data","setState","status","error","fetchStatus","result","stream","chunk","signal","aborted","setQueryData","prev","concat","push","getQueryData"],"sources":["/Users/serdarselcuk/Desktop/DevOps/Project/muhasebedemo/node_modules/@tanstack/query-core/src/streamedQuery.ts"],"sourcesContent":["import type { QueryFunction, QueryFunctionContext, QueryKey } from './types'\n\n/**\n * This is a helper function to create a query function that streams data from an AsyncIterable.\n * Data will be an Array of all the chunks received.\n * The query will be in a 'pending' state until the first chunk of data is received, but will go to 'success' after that.\n * The query will stay in fetchStatus 'fetching' until the stream ends.\n * @param queryFn - The function that returns an AsyncIterable to stream data from.\n * @param refetchMode - Defines how re-fetches are handled.\n * Defaults to `'reset'`, erases all data and puts the query back into `pending` state.\n * Set to `'append'` to append new data to the existing data.\n * Set to `'replace'` to write the data to the cache at the end of the stream.\n */\nexport function streamedQuery<\n  TQueryFnData = unknown,\n  TQueryKey extends QueryKey = QueryKey,\n>({\n  queryFn,\n  refetchMode = 'reset',\n}: {\n  queryFn: (\n    context: QueryFunctionContext<TQueryKey>,\n  ) => AsyncIterable<TQueryFnData> | Promise<AsyncIterable<TQueryFnData>>\n  refetchMode?: 'append' | 'reset' | 'replace'\n}): QueryFunction<Array<TQueryFnData>, TQueryKey> {\n  return async (context) => {\n    const query = context.client\n      .getQueryCache()\n      .find({ queryKey: context.queryKey, exact: true })\n    const isRefetch = !!query && query.state.data !== undefined\n\n    if (isRefetch && refetchMode === 'reset') {\n      query.setState({\n        status: 'pending',\n        data: undefined,\n        error: null,\n        fetchStatus: 'fetching',\n      })\n    }\n\n    const result: Array<TQueryFnData> = []\n    const stream = await queryFn(context)\n\n    for await (const chunk of stream) {\n      if (context.signal.aborted) {\n        break\n      }\n\n      // don't append to the cache directly when replace-refetching\n      if (!isRefetch || refetchMode !== 'replace') {\n        context.client.setQueryData<Array<TQueryFnData>>(\n          context.queryKey,\n          (prev = []) => {\n            return prev.concat([chunk])\n          },\n        )\n      }\n      result.push(chunk)\n    }\n\n    // finalize result: replace-refetching needs to write to the cache\n    if (isRefetch && refetchMode === 'replace' && !context.signal.aborted) {\n      context.client.setQueryData<Array<TQueryFnData>>(context.queryKey, result)\n    }\n\n    return context.client.getQueryData(context.queryKey)!\n  }\n}\n"],"mappings":";AAaO,SAASA,cAGd;EACAC,OAAA;EACAC,WAAA,GAAc;AAChB,GAKkD;EAChD,OAAO,MAAOC,OAAA,IAAY;IACxB,MAAMC,KAAA,GAAQD,OAAA,CAAQE,MAAA,CACnBC,aAAA,CAAc,EACdC,IAAA,CAAK;MAAEC,QAAA,EAAUL,OAAA,CAAQK,QAAA;MAAUC,KAAA,EAAO;IAAK,CAAC;IACnD,MAAMC,SAAA,GAAY,CAAC,CAACN,KAAA,IAASA,KAAA,CAAMO,KAAA,CAAMC,IAAA,KAAS;IAElD,IAAIF,SAAA,IAAaR,WAAA,KAAgB,SAAS;MACxCE,KAAA,CAAMS,QAAA,CAAS;QACbC,MAAA,EAAQ;QACRF,IAAA,EAAM;QACNG,KAAA,EAAO;QACPC,WAAA,EAAa;MACf,CAAC;IACH;IAEA,MAAMC,MAAA,GAA8B,EAAC;IACrC,MAAMC,MAAA,GAAS,MAAMjB,OAAA,CAAQE,OAAO;IAEpC,iBAAiBgB,KAAA,IAASD,MAAA,EAAQ;MAChC,IAAIf,OAAA,CAAQiB,MAAA,CAAOC,OAAA,EAAS;QAC1B;MACF;MAGA,IAAI,CAACX,SAAA,IAAaR,WAAA,KAAgB,WAAW;QAC3CC,OAAA,CAAQE,MAAA,CAAOiB,YAAA,CACbnB,OAAA,CAAQK,QAAA,EACR,CAACe,IAAA,GAAO,EAAC,KAAM;UACb,OAAOA,IAAA,CAAKC,MAAA,CAAO,CAACL,KAAK,CAAC;QAC5B,CACF;MACF;MACAF,MAAA,CAAOQ,IAAA,CAAKN,KAAK;IACnB;IAGA,IAAIT,SAAA,IAAaR,WAAA,KAAgB,aAAa,CAACC,OAAA,CAAQiB,MAAA,CAAOC,OAAA,EAAS;MACrElB,OAAA,CAAQE,MAAA,CAAOiB,YAAA,CAAkCnB,OAAA,CAAQK,QAAA,EAAUS,MAAM;IAC3E;IAEA,OAAOd,OAAA,CAAQE,MAAA,CAAOqB,YAAA,CAAavB,OAAA,CAAQK,QAAQ;EACrD;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}