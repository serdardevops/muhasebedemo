// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Kullanıcı Modeli
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      String   @default("USER")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // İlişkiler
  company   Company? @relation(fields: [companyId], references: [id])
  companyId String?

  // Kullanıcının oluşturduğu kayıtlar
  invoices     Invoice[]
  transactions Transaction[]
  customers    Customer[]
  suppliers    Supplier[]
  products     Product[]
  cashBook     CashBook[]

  @@map("users")
}

// Şirket Bilgileri
model Company {
  id          String  @id @default(cuid())
  name        String
  taxNumber   String? @unique
  address     String?
  phone       String?
  email       String?
  website     String?
  logo        String?
  currency    String  @default("TRY")
  taxRate     Float   @default(18.0)
  invoiceNote String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // İlişkiler
  users        User[]
  invoices     Invoice[]
  transactions Transaction[]
  customers    Customer[]
  suppliers    Supplier[]
  products     Product[]
  cashBook     CashBook[]

  @@map("companies")
}

// Müşteri Modeli
model Customer {
  id        String  @id @default(cuid())
  name      String
  email     String?
  phone     String?
  address   String?
  taxNumber String?
  isActive  Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // İlişkiler
  company   Company @relation(fields: [companyId], references: [id])
  companyId String
  user      User    @relation(fields: [userId], references: [id])
  userId    String

  invoices     Invoice[]
  transactions Transaction[]
  cashBook     CashBook[]

  @@map("customers")
}

// Tedarikçi Modeli
model Supplier {
  id        String  @id @default(cuid())
  name      String
  email     String?
  phone     String?
  address   String?
  taxNumber String?
  isActive  Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // İlişkiler
  company   Company @relation(fields: [companyId], references: [id])
  companyId String
  user      User    @relation(fields: [userId], references: [id])
  userId    String

  transactions Transaction[]
  cashBook     CashBook[]

  @@map("suppliers")
}

// Ürün/Hizmet Modeli
model Product {
  id          String  @id @default(cuid())
  name        String
  description String?
  price       Float
  stock       Int     @default(0)
  minStock    Int     @default(0)
  unit        String  @default("adet")
  category    String?
  barcode     String?
  isActive    Boolean @default(true)
  type        String  @default("PRODUCT")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // İlişkiler
  company   Company @relation(fields: [companyId], references: [id])
  companyId String
  user      User    @relation(fields: [userId], references: [id])
  userId    String

  invoiceItems InvoiceItem[]

  @@map("products")
}

// Fatura Modeli
model Invoice {
  id         String    @id @default(cuid())
  invoiceNo  String    @unique
  date       DateTime
  dueDate    DateTime?
  status     String    @default("DRAFT")
  type       String    @default("SALES")
  subtotal   Float
  taxAmount  Float
  total      Float
  notes      String?
  paidAmount Float     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // İlişkiler
  company    Company   @relation(fields: [companyId], references: [id])
  companyId  String
  user       User      @relation(fields: [userId], references: [id])
  userId     String
  customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?

  items InvoiceItem[]

  @@map("invoices")
}

// Fatura Kalemi
model InvoiceItem {
  id       String @id @default(cuid())
  quantity Float
  price    Float
  total    Float

  // İlişkiler
  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId String
  product   Product @relation(fields: [productId], references: [id])
  productId String

  @@map("invoice_items")
}

// Gelir-Gider İşlemleri
model Transaction {
  id          String   @id @default(cuid())
  type        String
  amount      Float
  description String
  date        DateTime
  category    String?
  reference   String?
  notes       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // İlişkiler
  company    Company   @relation(fields: [companyId], references: [id])
  companyId  String
  user       User      @relation(fields: [userId], references: [id])
  userId     String
  customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?
  supplier   Supplier? @relation(fields: [supplierId], references: [id])
  supplierId String?

  @@map("transactions")
}

// Kasa Defteri
model CashBook {
  id          String   @id @default(cuid())
  type        String // "CASH_IN" | "CASH_OUT"
  amount      Float
  description String
  date        DateTime
  category    String?
  reference   String?
  notes       String?
  balance     Float // Kasa bakiyesi bu işlem sonrası

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // İlişkiler
  company    Company   @relation(fields: [companyId], references: [id])
  companyId  String
  user       User      @relation(fields: [userId], references: [id])
  userId     String
  customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?
  supplier   Supplier? @relation(fields: [supplierId], references: [id])
  supplierId String?

  @@map("cash_book")
}

// SQLite için enum'lar String olarak tanımlandı
// Kullanılabilir değerler:
// UserRole: "ADMIN", "USER", "ACCOUNTANT"
// ProductType: "PRODUCT", "SERVICE"
// InvoiceStatus: "DRAFT", "SENT", "PAID", "OVERDUE", "CANCELLED"
// InvoiceType: "SALES", "PURCHASE"
// TransactionType: "INCOME", "EXPENSE" 
